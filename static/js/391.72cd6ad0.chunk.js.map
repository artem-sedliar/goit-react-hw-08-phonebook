{"version":3,"file":"static/js/391.72cd6ad0.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/pages/Contacts/Contacts.module.css?fb9d","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/UpdateForm/UpdateForm.jsx","components/ContactList/ContactList.js","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"book\":\"Contacts_book__n5uiH\"};","import { PropTypes } from 'prop-types';\nimport { useState } from 'react';\n// import s from './ContactForm.module.css';\nimport { Notify } from 'notiflix';\n\nimport Button from 'react-bootstrap/Button';\nimport Col from 'react-bootstrap/Col';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport Row from 'react-bootstrap/Row';\n\nimport { RiUserShared2Line } from 'react-icons/ri';\nimport { BsTelephoneForward } from 'react-icons/bs';\n\nconst ContactForm = ({ contacts, onAdd, isAdded }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onAddNewContact = evt => {\n    evt.preventDefault();\n\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      setName('');\n      setNumber('');\n      return Notify.warning(`${name} is already in contacts list!`);\n    } else {\n      onAdd({ name, number });\n      if (isAdded) {\n        Notify.success(`${name} contact added successfully`);\n      }\n    }\n\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <Form\n      onSubmit={onAddNewContact}\n      //! autoComplete=\"off\"\n      className=\"mb-3\"\n    >\n      <Row className=\"align-items-center\">\n        <Col xs=\"auto\">\n          <Form.Label htmlFor=\"inlineFormInput\" visuallyHidden>\n            Name\n          </Form.Label>\n          <InputGroup className=\"mb-2\">\n            <InputGroup.Text>\n              <RiUserShared2Line size=\"18px\" />\n            </InputGroup.Text>\n            <Form.Control\n              id=\"inlineFormInputGroup\"\n              type=\"text\"\n              placeholder=\"Name\"\n              name=\"name\"\n              value={name}\n              onChange={e => setName(e.target.value)}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\">\n          <Form.Label htmlFor=\"inlineFormInputGroup\" visuallyHidden>\n            Username\n          </Form.Label>\n          <InputGroup className=\"mb-2\">\n            <InputGroup.Text>\n              <BsTelephoneForward size=\"18px\" />\n            </InputGroup.Text>\n            <Form.Control\n              id=\"inlineFormInputGroup\"\n              type=\"tel\"\n              placeholder=\"Number\"\n              name=\"number\"\n              value={number}\n              onChange={e => setNumber(e.target.value)}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n          </InputGroup>\n        </Col>\n        <Col xs=\"auto\">\n          <Button variant=\"outline-primary\" type=\"submit\" className=\"mb-2\">\n            Add contact\n          </Button>\n        </Col>\n      </Row>\n    </Form>\n  );\n\n\n};\n\nContactForm.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    })\n  ),\n  onAdd: PropTypes.func.isRequired,\n  isAdded: PropTypes.bool.isRequired,\n};\n\nexport default ContactForm;\n","import { useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { filterList } from 'redux/filter';\n// import s from './Filter.module.css';\n\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nimport { FiFilter } from 'react-icons/fi';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n  const [filter, setFilter] = useState('');\n  dispatch(filterList(filter));\n\n  return (\n    <InputGroup className=\"mb-3\">\n      <InputGroup.Text id=\"filter\">\n        <FiFilter size=\"18px\" />\n      </InputGroup.Text>\n      <Form.Control\n        placeholder=\"Enter name to find contacts\"\n        aria-label=\"Username\"\n        aria-describedby=\"filter\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={e => setFilter(e.target.value)}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n    </InputGroup>\n  );\n\n\n};\n\nexport default Filter;\n","import { PropTypes } from 'prop-types';\nimport { useState } from 'react';\n// import s from './UpdateForm.module.css';\nimport { Notify } from 'notiflix';\n\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport InputGroup from 'react-bootstrap/InputGroup';\n\nimport { RiUserShared2Line } from 'react-icons/ri';\nimport { BsTelephoneForward } from 'react-icons/bs';\nimport { GrUpdate } from 'react-icons/gr';\n\nconst UpdateForm = ({ onUpdate, isUpdated, setIsClicked, id }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onUpdateCurrentContact = evt => {\n    evt.preventDefault();\n\n    onUpdate({ id, name, number });\n\n    if (isUpdated) {\n      Notify.success(`${name} contact updated successfully`);\n    }\n\n    setName('');\n    setNumber('');\n    setIsClicked(false);\n  };\n\n  return (\n    <Form\n      onSubmit={onUpdateCurrentContact}\n      //! autoComplete=\"off\"\n    >\n      <InputGroup className=\"mb-2\">\n        <InputGroup.Text>\n          <RiUserShared2Line size=\"18px\" />\n        </InputGroup.Text>\n        <Form.Control\n          aria-label=\"name\"\n          type=\"text\"\n          placeholder=\"Name\"\n          name=\"name\"\n          value={name}\n          onChange={e => setName(e.target.value)}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n        />\n        <InputGroup.Text>\n          <BsTelephoneForward size=\"18px\" />\n        </InputGroup.Text>\n        <Form.Control\n          aria-label=\"number\"\n          type=\"tel\"\n          name=\"number\"\n          placeholder=\"Number\"\n          value={number}\n          onChange={e => setNumber(e.target.value)}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n        />\n        <Button\n        \n          variant=\"outline-primary\"\n          type=\"submit\"\n          className=\"d-flex align-items-center \"\n        >\n          <GrUpdate size=\"18px\" />\n        </Button>\n      </InputGroup>\n    </Form>\n  );\n\n\n};\n\nUpdateForm.propTypes = {\n  onUpdate: PropTypes.func.isRequired,\n  isUpdated: PropTypes.bool.isRequired,\n  setIsClicked: PropTypes.func.isRequired,\n  id: PropTypes.number.isRequired,\n};\n\nexport default UpdateForm;\n","import { PropTypes } from 'prop-types';\nimport { useState } from 'react';\nimport { useSelector } from 'react-redux';\n// import s from './ContactList.module.css';\nimport { getFilterName } from 'redux/filter';\nimport UpdateForm from 'components/UpdateForm/UpdateForm';\n\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Button from 'react-bootstrap/Button';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ButtonToolbar from 'react-bootstrap/ButtonToolbar';\n\nimport { MdOutlineContactPage } from 'react-icons/md';\n\nconst ContactList = ({ contacts, onDelete, onUpdate, isUpdated }) => {\n  const filter = useSelector(getFilterName);\n  const [isClicked, setIsClicked] = useState(false);\n  const [currentId, setCurrentId] = useState('');\n\n  const onUpdateClick = id => {\n    setIsClicked(true);\n    setCurrentId(id);\n  };\n\n  return (\n    <ListGroup variant=\"flush\" className=\"border-top border-primary \">\n      {contacts.map(\n        ({ id, name, number }) =>\n          name.toLowerCase().indexOf(filter.toLowerCase()) !== -1 && (\n            <ListGroup.Item key={id}>\n              <ButtonToolbar\n                className=\" justify-content-between pt-2\"\n                aria-label=\"Toolbar with Button groups\"\n              >\n                <ListGroup horizontal className=\"mb-2\">\n                  <ListGroup.Item>\n                    <MdOutlineContactPage size=\"18px\" />\n                  </ListGroup.Item>\n                  <ListGroup.Item>{name}</ListGroup.Item>\n                  <ListGroup.Item>{number}</ListGroup.Item>\n                </ListGroup>\n                <ButtonGroup className=\" mb-2\" aria-label=\"First group\">\n                  <Button\n                    variant=\"outline-warning\"\n                    type=\"button\"\n                    onClick={() => onUpdateClick(id)}\n                  >\n                    Update\n                  </Button>\n                  <Button\n                    variant=\"outline-danger\"\n                    type=\"button\"\n                    onClick={() => onDelete(id)}\n                  >\n                    Delete\n                  </Button>\n                </ButtonGroup>\n              </ButtonToolbar>\n\n              {isClicked && currentId === id && (\n                <UpdateForm\n                  onUpdate={onUpdate}\n                  isUpdated={isUpdated}\n                  setIsClicked={setIsClicked}\n                  id={id}\n                />\n              )}\n            </ListGroup.Item>\n          )\n      )}\n    </ListGroup>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      phone: PropTypes.number.isRequired,\n    })\n  ),\n  onDelete: PropTypes.func.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  isUpdated: PropTypes.bool.isRequired,\n};\n\nexport default ContactList;\n","import s from './Contacts.module.css';\n\nimport {\n  useFetchContactsQuery,\n  useDeleteContactMutation,\n  useAddContactMutation,\n  useUpdateContactMutation,\n} from 'redux/contactsApi';\n\nimport ContactForm from '../../components/ContactForm/ContactForm';\nimport Filter from '../../components/Filter/Filter';\nimport Loader from 'components/Loader/Loader';\nimport ContactList from '../../components/ContactList/ContactList';\n\nimport Container from 'react-bootstrap/esm/Container';\nimport Row from 'react-bootstrap/Row';\n\nconst Contacts = () => {\n  const { data, error, isFetching, isError } = useFetchContactsQuery();\n  const showContactsData = data && !isError;\n\n  const [addContact, { isSuccess: isAdded }] = useAddContactMutation();\n  const [deleteContact] = useDeleteContactMutation();\n  const [updateContact, { isSuccess: isUpdated }] = useUpdateContactMutation();\n\n  return (\n    <div className={s.book}>\n      <Container>\n        <Row className=\"justify-content-md-center d-grid\">\n          <ContactForm contacts={data} onAdd={addContact} isAdded={isAdded} />\n\n          <Filter />\n\n          {isFetching && <Loader />}\n          {isError && <b>{error.status}</b>}\n          {showContactsData && (\n            <ContactList\n              contacts={data}\n              onDelete={deleteContact}\n              onUpdate={updateContact}\n              isUpdated={isUpdated}\n            />\n          )}\n        </Row>\n      </Container>\n    </div>\n  );\n};\n\n// UpdateForm.propTypes = {\n//   onUpdate: PropTypes.func.isRequired,\n//   isUpdated: PropTypes.bool.isRequired,\n//   setIsClicked: PropTypes.func.isRequired,\n//   id: PropTypes.number.isRequired,\n// };\n\nexport default Contacts;\n"],"names":["contacts","onAdd","isAdded","useState","name","setName","number","setNumber","Form","onSubmit","evt","preventDefault","find","contact","toLowerCase","Notify","className","Row","Col","xs","htmlFor","visuallyHidden","InputGroup","size","id","type","placeholder","value","onChange","e","target","pattern","title","required","Button","variant","dispatch","useDispatch","filter","setFilter","filterList","onUpdate","isUpdated","setIsClicked","onDelete","useSelector","getFilterName","isClicked","currentId","setCurrentId","ListGroup","map","indexOf","ButtonToolbar","horizontal","ButtonGroup","onClick","onUpdateClick","useFetchContactsQuery","data","error","isFetching","isError","showContactsData","useAddContactMutation","addContact","isSuccess","useDeleteContactMutation","deleteContact","useUpdateContactMutation","updateContact","s","Container","Loader","status"],"sourceRoot":""}